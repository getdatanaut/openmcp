import * as fs from 'node:fs/promises';

import path from 'path';
import { describe, expect, it } from 'vitest';

import listTools from '../list-tools.ts';

describe('listTools', () => {
  it.each([
    [
      'petstore.json',
      [
        { name: 'addPet', route: 'POST /pet' },
        { name: 'updatePet', route: 'PUT /pet' },
        { name: 'findPetsByStatus', route: 'GET /pet/findByStatus' },
        { name: 'findPetsByTags', route: 'GET /pet/findByTags' },
        { name: 'getPetById', route: 'GET /pet/{petId}' },
        { name: 'updatePetWithForm', route: 'POST /pet/{petId}' },
        { name: 'deletePet', route: 'DELETE /pet/{petId}' },
        { name: 'uploadFile', route: 'POST /pet/{petId}/uploadImage' },
        { name: 'getInventory', route: 'GET /store/inventory' },
        { name: 'placeOrder', route: 'POST /store/order' },
        { name: 'getOrderById', route: 'GET /store/order/{orderId}' },
        { name: 'deleteOrder', route: 'DELETE /store/order/{orderId}' },
        { name: 'createUser', route: 'POST /user' },
        { name: 'createUsersWithListInput', route: 'POST /user/createWithList' },
        { name: 'loginUser', route: 'GET /user/login' },
        { name: 'logoutUser', route: 'GET /user/logout' },
        { name: 'getUserByName', route: 'GET /user/{username}' },
        { name: 'updateUser', route: 'PUT /user/{username}' },
        { name: 'deleteUser', route: 'DELETE /user/{username}' },
      ],
    ],
    ['slack.json', [
      { name: 'admin_apps_approve', route: 'POST /admin.apps.approve' },
      { name: 'admin_apps_approved_list', route: 'GET /admin.apps.approved.list' },
      { name: 'admin_apps_requests_list', route: 'GET /admin.apps.requests.list' },
      { name: 'admin_apps_restrict', route: 'POST /admin.apps.restrict' },
      { name: 'admin_apps_restricted_list', route: 'GET /admin.apps.restricted.list' },
      { name: 'admin_conversations_archive', route: 'POST /admin.conversations.archive' },
      { name: 'admin_conversations_convertToPrivate', route: 'POST /admin.conversations.convertToPrivate' },
      { name: 'admin_conversations_create', route: 'POST /admin.conversations.create' },
      { name: 'admin_conversations_delete', route: 'POST /admin.conversations.delete' },
      { name: 'admin_conversations_disconnectShared', route: 'POST /admin.conversations.disconnectShared' },
      { name: 'admin_conversations_ekm_listOriginalConnectedChannelInfo', route: 'GET /admin.conversations.ekm.listOriginalConnectedChannelInfo' },
      { name: 'admin_conversations_getConversationPrefs', route: 'GET /admin.conversations.getConversationPrefs' },
      { name: 'admin_conversations_getTeams', route: 'GET /admin.conversations.getTeams' },
      { name: 'admin_conversations_invite', route: 'POST /admin.conversations.invite' },
      { name: 'admin_conversations_rename', route: 'POST /admin.conversations.rename' },
      { name: 'admin_conversations_restrictAccess_addGroup', route: 'POST /admin.conversations.restrictAccess.addGroup' },
      { name: 'admin_conversations_restrictAccess_listGroups', route: 'GET /admin.conversations.restrictAccess.listGroups' },
      { name: 'admin_conversations_restrictAccess_removeGroup', route: 'POST /admin.conversations.restrictAccess.removeGroup' },
      { name: 'admin_conversations_search', route: 'GET /admin.conversations.search' },
      { name: 'admin_conversations_setConversationPrefs', route: 'POST /admin.conversations.setConversationPrefs' },
      { name: 'admin_conversations_setTeams', route: 'POST /admin.conversations.setTeams' },
      { name: 'admin_conversations_unarchive', route: 'POST /admin.conversations.unarchive' },
      { name: 'admin_emoji_add', route: 'POST /admin.emoji.add' },
      { name: 'admin_emoji_addAlias', route: 'POST /admin.emoji.addAlias' },
      { name: 'admin_emoji_list', route: 'GET /admin.emoji.list' },
      { name: 'admin_emoji_remove', route: 'POST /admin.emoji.remove' },
      { name: 'admin_emoji_rename', route: 'POST /admin.emoji.rename' },
      { name: 'admin_inviteRequests_approve', route: 'POST /admin.inviteRequests.approve' },
      { name: 'admin_inviteRequests_approved_list', route: 'GET /admin.inviteRequests.approved.list' },
      { name: 'admin_inviteRequests_denied_list', route: 'GET /admin.inviteRequests.denied.list' },
      { name: 'admin_inviteRequests_deny', route: 'POST /admin.inviteRequests.deny' },
      { name: 'admin_inviteRequests_list', route: 'GET /admin.inviteRequests.list' },
      { name: 'admin_teams_admins_list', route: 'GET /admin.teams.admins.list' },
      { name: 'admin_teams_create', route: 'POST /admin.teams.create' },
      { name: 'admin_teams_list', route: 'GET /admin.teams.list' },
      { name: 'admin_teams_owners_list', route: 'GET /admin.teams.owners.list' },
      { name: 'admin_teams_settings_info', route: 'GET /admin.teams.settings.info' },
      { name: 'admin_teams_settings_setDefaultChannels', route: 'POST /admin.teams.settings.setDefaultChannels' },
      { name: 'admin_teams_settings_setDescription', route: 'POST /admin.teams.settings.setDescription' },
      { name: 'admin_teams_settings_setDiscoverability', route: 'POST /admin.teams.settings.setDiscoverability' },
      { name: 'admin_teams_settings_setIcon', route: 'POST /admin.teams.settings.setIcon' },
      { name: 'admin_teams_settings_setName', route: 'POST /admin.teams.settings.setName' },
      { name: 'admin_usergroups_addChannels', route: 'POST /admin.usergroups.addChannels' },
      { name: 'admin_usergroups_addTeams', route: 'POST /admin.usergroups.addTeams' },
      { name: 'admin_usergroups_listChannels', route: 'GET /admin.usergroups.listChannels' },
      { name: 'admin_usergroups_removeChannels', route: 'POST /admin.usergroups.removeChannels' },
      { name: 'admin_users_assign', route: 'POST /admin.users.assign' },
      { name: 'admin_users_invite', route: 'POST /admin.users.invite' },
      { name: 'admin_users_list', route: 'GET /admin.users.list' },
      { name: 'admin_users_remove', route: 'POST /admin.users.remove' },
      { name: 'admin_users_session_invalidate', route: 'POST /admin.users.session.invalidate' },
      { name: 'admin_users_session_reset', route: 'POST /admin.users.session.reset' },
      { name: 'admin_users_setAdmin', route: 'POST /admin.users.setAdmin' },
      { name: 'admin_users_setExpiration', route: 'POST /admin.users.setExpiration' },
      { name: 'admin_users_setOwner', route: 'POST /admin.users.setOwner' },
      { name: 'admin_users_setRegular', route: 'POST /admin.users.setRegular' },
      { name: 'api_test', route: 'GET /api.test' },
      { name: 'apps_event_authorizations_list', route: 'GET /apps.event.authorizations.list' },
      { name: 'apps_permissions_info', route: 'GET /apps.permissions.info' },
      { name: 'apps_permissions_request', route: 'GET /apps.permissions.request' },
      { name: 'apps_permissions_resources_list', route: 'GET /apps.permissions.resources.list' },
      { name: 'apps_permissions_scopes_list', route: 'GET /apps.permissions.scopes.list' },
      { name: 'apps_permissions_users_list', route: 'GET /apps.permissions.users.list' },
      { name: 'apps_permissions_users_request', route: 'GET /apps.permissions.users.request' },
      { name: 'apps_uninstall', route: 'GET /apps.uninstall' },
      { name: 'auth_revoke', route: 'GET /auth.revoke' },
      { name: 'auth_test', route: 'GET /auth.test' },
      { name: 'bots_info', route: 'GET /bots.info' },
      { name: 'calls_add', route: 'POST /calls.add' },
      { name: 'calls_end', route: 'POST /calls.end' },
      { name: 'calls_info', route: 'GET /calls.info' },
      { name: 'calls_participants_add', route: 'POST /calls.participants.add' },
      { name: 'calls_participants_remove', route: 'POST /calls.participants.remove' },
      { name: 'calls_update', route: 'POST /calls.update' },
      { name: 'chat_delete', route: 'POST /chat.delete' },
      { name: 'chat_deleteScheduledMessage', route: 'POST /chat.deleteScheduledMessage' },
      { name: 'chat_getPermalink', route: 'GET /chat.getPermalink' },
      { name: 'chat_meMessage', route: 'POST /chat.meMessage' },
      { name: 'chat_postEphemeral', route: 'POST /chat.postEphemeral' },
      { name: 'chat_postMessage', route: 'POST /chat.postMessage' },
      { name: 'chat_scheduleMessage', route: 'POST /chat.scheduleMessage' },
      { name: 'chat_scheduledMessages_list', route: 'GET /chat.scheduledMessages.list' },
      { name: 'chat_unfurl', route: 'POST /chat.unfurl' },
      { name: 'chat_update', route: 'POST /chat.update' },
      { name: 'conversations_archive', route: 'POST /conversations.archive' },
      { name: 'conversations_close', route: 'POST /conversations.close' },
      { name: 'conversations_create', route: 'POST /conversations.create' },
      { name: 'conversations_history', route: 'GET /conversations.history' },
      { name: 'conversations_info', route: 'GET /conversations.info' },
      { name: 'conversations_invite', route: 'POST /conversations.invite' },
      { name: 'conversations_join', route: 'POST /conversations.join' },
      { name: 'conversations_kick', route: 'POST /conversations.kick' },
      { name: 'conversations_leave', route: 'POST /conversations.leave' },
      { name: 'conversations_list', route: 'GET /conversations.list' },
      { name: 'conversations_mark', route: 'POST /conversations.mark' },
      { name: 'conversations_members', route: 'GET /conversations.members' },
      { name: 'conversations_open', route: 'POST /conversations.open' },
      { name: 'conversations_rename', route: 'POST /conversations.rename' },
      { name: 'conversations_replies', route: 'GET /conversations.replies' },
      { name: 'conversations_setPurpose', route: 'POST /conversations.setPurpose' },
      { name: 'conversations_setTopic', route: 'POST /conversations.setTopic' },
      { name: 'conversations_unarchive', route: 'POST /conversations.unarchive' },
      { name: 'dialog_open', route: 'GET /dialog.open' },
      { name: 'dnd_endDnd', route: 'POST /dnd.endDnd' },
      { name: 'dnd_endSnooze', route: 'POST /dnd.endSnooze' },
      { name: 'dnd_info', route: 'GET /dnd.info' },
      { name: 'dnd_setSnooze', route: 'POST /dnd.setSnooze' },
      { name: 'dnd_teamInfo', route: 'GET /dnd.teamInfo' },
      { name: 'emoji_list', route: 'GET /emoji.list' },
      { name: 'files_comments_delete', route: 'POST /files.comments.delete' },
      { name: 'files_delete', route: 'POST /files.delete' },
      { name: 'files_info', route: 'GET /files.info' },
      { name: 'files_list', route: 'GET /files.list' },
      { name: 'files_remote_add', route: 'POST /files.remote.add' },
      { name: 'files_remote_info', route: 'GET /files.remote.info' },
      { name: 'files_remote_list', route: 'GET /files.remote.list' },
      { name: 'files_remote_remove', route: 'POST /files.remote.remove' },
      { name: 'files_remote_share', route: 'GET /files.remote.share' },
      { name: 'files_remote_update', route: 'POST /files.remote.update' },
      { name: 'files_revokePublicURL', route: 'POST /files.revokePublicURL' },
      { name: 'files_sharedPublicURL', route: 'POST /files.sharedPublicURL' },
      { name: 'files_upload', route: 'POST /files.upload' },
      { name: 'migration_exchange', route: 'GET /migration.exchange' },
      { name: 'oauth_access', route: 'GET /oauth.access' },
      { name: 'oauth_token', route: 'GET /oauth.token' },
      { name: 'oauth_v2_access', route: 'GET /oauth.v2.access' },
      { name: 'pins_add', route: 'POST /pins.add' },
      { name: 'pins_list', route: 'GET /pins.list' },
      { name: 'pins_remove', route: 'POST /pins.remove' },
      { name: 'reactions_add', route: 'POST /reactions.add' },
      { name: 'reactions_get', route: 'GET /reactions.get' },
      { name: 'reactions_list', route: 'GET /reactions.list' },
      { name: 'reactions_remove', route: 'POST /reactions.remove' },
      { name: 'reminders_add', route: 'POST /reminders.add' },
      { name: 'reminders_complete', route: 'POST /reminders.complete' },
      { name: 'reminders_delete', route: 'POST /reminders.delete' },
      { name: 'reminders_info', route: 'GET /reminders.info' },
      { name: 'reminders_list', route: 'GET /reminders.list' },
      { name: 'rtm_connect', route: 'GET /rtm.connect' },
      { name: 'search_messages', route: 'GET /search.messages' },
      { name: 'stars_add', route: 'POST /stars.add' },
      { name: 'stars_list', route: 'GET /stars.list' },
      { name: 'stars_remove', route: 'POST /stars.remove' },
      { name: 'team_accessLogs', route: 'GET /team.accessLogs' },
      { name: 'team_billableInfo', route: 'GET /team.billableInfo' },
      { name: 'team_info', route: 'GET /team.info' },
      { name: 'team_integrationLogs', route: 'GET /team.integrationLogs' },
      { name: 'team_profile_get', route: 'GET /team.profile.get' },
      { name: 'usergroups_create', route: 'POST /usergroups.create' },
      { name: 'usergroups_disable', route: 'POST /usergroups.disable' },
      { name: 'usergroups_enable', route: 'POST /usergroups.enable' },
      { name: 'usergroups_list', route: 'GET /usergroups.list' },
      { name: 'usergroups_update', route: 'POST /usergroups.update' },
      { name: 'usergroups_users_list', route: 'GET /usergroups.users.list' },
      { name: 'usergroups_users_update', route: 'POST /usergroups.users.update' },
      { name: 'users_conversations', route: 'GET /users.conversations' },
      { name: 'users_deletePhoto', route: 'POST /users.deletePhoto' },
      { name: 'users_getPresence', route: 'GET /users.getPresence' },
      { name: 'users_identity', route: 'GET /users.identity' },
      { name: 'users_info', route: 'GET /users.info' },
      { name: 'users_list', route: 'GET /users.list' },
      { name: 'users_lookupByEmail', route: 'GET /users.lookupByEmail' },
      { name: 'users_profile_get', route: 'GET /users.profile.get' },
      { name: 'users_profile_set', route: 'POST /users.profile.set' },
      { name: 'users_setActive', route: 'POST /users.setActive' },
      { name: 'users_setPhoto', route: 'POST /users.setPhoto' },
      { name: 'users_setPresence', route: 'POST /users.setPresence' },
      { name: 'views_open', route: 'GET /views.open' },
      { name: 'views_publish', route: 'GET /views.publish' },
      { name: 'views_push', route: 'GET /views.push' },
      { name: 'views_update', route: 'GET /views.update' },
      { name: 'workflows_stepCompleted', route: 'GET /workflows.stepCompleted' },
      { name: 'workflows_stepFailed', route: 'GET /workflows.stepFailed' },
      { name: 'workflows_updateStep', route: 'GET /workflows.updateStep' }
    ]],
    ['weather-gov.json', [
      { name: 'alerts_query', route: 'GET /alerts' },
      { name: 'alerts_active', route: 'GET /alerts/active' },
      { name: 'alerts_active_count', route: 'GET /alerts/active/count' },
      { name: 'alerts_active_zone', route: 'GET /alerts/active/zone/{zoneId}' },
      { name: 'alerts_active_area', route: 'GET /alerts/active/area/{area}' },
      { name: 'alerts_active_region', route: 'GET /alerts/active/region/{region}' },
      { name: 'alerts_types', route: 'GET /alerts/types' },
      { name: 'alerts_single', route: 'GET /alerts/{id}' },
      { name: 'cwsu', route: 'GET /aviation/cwsus/{cwsuId}' },
      { name: 'cwas', route: 'GET /aviation/cwsus/{cwsuId}/cwas' },
      { name: 'cwa', route: 'GET /aviation/cwsus/{cwsuId}/cwas/{date}/{sequence}' },
      { name: 'sigmetQuery', route: 'GET /aviation/sigmets' },
      { name: 'sigmetsByATSU', route: 'GET /aviation/sigmets/{atsu}' },
      { name: 'sigmetsByATSUByDate', route: 'GET /aviation/sigmets/{atsu}/{date}' },
      { name: 'sigmet', route: 'GET /aviation/sigmets/{atsu}/{date}/{time}' },
      { name: 'glossary', route: 'GET /glossary' },
      { name: 'gridpoint', route: 'GET /gridpoints/{wfo}/{x},{y}' },
      { name: 'gridpoint_forecast', route: 'GET /gridpoints/{wfo}/{x},{y}/forecast' },
      { name: 'gridpoint_forecast_hourly', route: 'GET /gridpoints/{wfo}/{x},{y}/forecast/hourly' },
      { name: 'gridpoint_stations', route: 'GET /gridpoints/{wfo}/{x},{y}/stations' },
      { name: 'icons', route: 'GET /icons/{set}/{timeOfDay}/{first}' },
      { name: 'iconsDualCondition', route: 'GET /icons/{set}/{timeOfDay}/{first}/{second}' },
      { name: 'icons_summary', route: 'GET /icons' },
      { name: 'satellite_thumbnails', route: 'GET /thumbnails/satellite/{area}' },
      { name: 'station_observation_list', route: 'GET /stations/{stationId}/observations' },
      { name: 'station_observation_latest', route: 'GET /stations/{stationId}/observations/latest' },
      { name: 'station_observation_time', route: 'GET /stations/{stationId}/observations/{time}' },
      { name: 'tafs', route: 'GET /stations/{stationId}/tafs' },
      { name: 'taf', route: 'GET /stations/{stationId}/tafs/{date}/{time}' },
      { name: 'obs_stations', route: 'GET /stations' },
      { name: 'obs_station', route: 'GET /stations/{stationId}' },
      { name: 'office', route: 'GET /offices/{officeId}' },
      { name: 'office_headline', route: 'GET /offices/{officeId}/headlines/{headlineId}' },
      { name: 'office_headlines', route: 'GET /offices/{officeId}/headlines' },
      { name: 'point', route: 'GET /points/{point}' },
      { name: 'point_stations', route: 'GET /points/{point}/stations' },
      { name: 'radar_servers', route: 'GET /radar/servers' },
      { name: 'radar_server', route: 'GET /radar/servers/{id}' },
      { name: 'radar_stations', route: 'GET /radar/stations' },
      { name: 'radar_station', route: 'GET /radar/stations/{stationId}' },
      { name: 'radar_station_alarms', route: 'GET /radar/stations/{stationId}/alarms' },
      { name: 'radar_queue', route: 'GET /radar/queues/{host}' },
      { name: 'radar_profiler', route: 'GET /radar/profilers/{stationId}' },
      { name: 'products_query', route: 'GET /products' },
      { name: 'product_locations', route: 'GET /products/locations' },
      { name: 'product_types', route: 'GET /products/types' },
      { name: 'product', route: 'GET /products/{productId}' },
      { name: 'products_type', route: 'GET /products/types/{typeId}' },
      { name: 'products_type_locations', route: 'GET /products/types/{typeId}/locations' },
      { name: 'location_products', route: 'GET /products/locations/{locationId}/types' },
      { name: 'products_type_location', route: 'GET /products/types/{typeId}/locations/{locationId}' },
      { name: 'zone_list', route: 'GET /zones' },
      { name: 'zone_list_type', route: 'GET /zones/{type}' },
      { name: 'zone', route: 'GET /zones/{type}/{zoneId}' },
      { name: 'zone_forecast', route: 'GET /zones/{type}/{zoneId}/forecast' },
      { name: 'zone_obs', route: 'GET /zones/forecast/{zoneId}/observations' },
      { name: 'zone_stations', route: 'GET /zones/forecast/{zoneId}/stations' }
    ]],
  ] as const)('should list tools from $0 document', async (filename, expectedTools) => {
    const document = JSON.parse(await fs.readFile(path.join(import.meta.dirname, './fixtures', filename), 'utf8'));
    expect(listTools(document)).toStrictEqual(expectedTools);
  });

  it('should handle document with no paths', () => {
    const emptyDocument = { paths: {} };
    const tools = listTools(emptyDocument);
    expect(tools.length).toBe(0);
  });

  it('should handle document with invalid paths', () => {
    const invalidDocument = { paths: 'not an ' };
    const tools = listTools(invalidDocument);
    expect(tools.length).toBe(0);
  });
});
