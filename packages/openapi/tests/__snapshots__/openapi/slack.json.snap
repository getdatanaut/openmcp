[
  {
    "description": "POST /admin.apps.approve - Approve an app for installation on a workspace.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "app_id": {
              "description": "The id of the app to approve.",
              "type": "string",
            },
            "request_id": {
              "description": "The id of the request to approve.",
              "type": "string",
            },
            "team_id": {
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.apps:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_apps_approve",
  },
  {
    "description": "GET /admin.apps.approved.list - List approved apps for an org or workspace.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "cursor": {
              "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
              "name": "cursor",
              "type": "string",
            },
            "enterprise_id": {
              "description": "",
              "name": "enterprise_id",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
              "name": "limit",
              "type": "integer",
            },
            "team_id": {
              "description": "",
              "name": "team_id",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.apps:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_apps_approved_list",
  },
  {
    "description": "GET /admin.apps.requests.list - List app requests for a team/workspace.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "cursor": {
              "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
              "name": "limit",
              "type": "integer",
            },
            "team_id": {
              "description": "",
              "name": "team_id",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.apps:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_apps_requests_list",
  },
  {
    "description": "POST /admin.apps.restrict - Restrict an app for installation on a workspace.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "app_id": {
              "description": "The id of the app to restrict.",
              "type": "string",
            },
            "request_id": {
              "description": "The id of the request to restrict.",
              "type": "string",
            },
            "team_id": {
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.apps:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_apps_restrict",
  },
  {
    "description": "GET /admin.apps.restricted.list - List restricted apps for an org or workspace.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "cursor": {
              "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
              "name": "cursor",
              "type": "string",
            },
            "enterprise_id": {
              "description": "",
              "name": "enterprise_id",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
              "name": "limit",
              "type": "integer",
            },
            "team_id": {
              "description": "",
              "name": "team_id",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.apps:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_apps_restricted_list",
  },
  {
    "description": "POST /admin.conversations.archive - Archive a public or private channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_id": {
              "description": "The channel to archive.",
              "type": "string",
            },
          },
          "required": [
            "channel_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_archive",
  },
  {
    "description": "POST /admin.conversations.convertToPrivate - Convert a public channel to a private channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_id": {
              "description": "The channel to convert to private.",
              "type": "string",
            },
          },
          "required": [
            "channel_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_convertToPrivate",
  },
  {
    "description": "POST /admin.conversations.create - Create a public or private channel-based conversation.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "description": {
              "description": "Description of the public or private channel to create.",
              "type": "string",
            },
            "is_private": {
              "description": "When `true`, creates a private channel instead of a public channel",
              "type": "boolean",
            },
            "name": {
              "description": "Name of the public or private channel to create.",
              "type": "string",
            },
            "org_wide": {
              "description": "When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel",
              "type": "boolean",
            },
            "team_id": {
              "description": "The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`.",
              "type": "string",
            },
          },
          "required": [
            "name",
            "is_private",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_create",
  },
  {
    "description": "POST /admin.conversations.delete - Delete a public or private channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_id": {
              "description": "The channel to delete.",
              "type": "string",
            },
          },
          "required": [
            "channel_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_delete",
  },
  {
    "description": "POST /admin.conversations.disconnectShared - Disconnect a connected channel from one or more workspaces.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_id": {
              "description": "The channel to be disconnected from some workspaces.",
              "type": "string",
            },
            "leaving_team_ids": {
              "description": "The team to be removed from the channel. Currently only a single team id can be specified.",
              "type": "string",
            },
          },
          "required": [
            "channel_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_disconnectShared",
  },
  {
    "description": "GET /admin.conversations.ekm.listOriginalConnectedChannelInfo - List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "channel_ids": {
              "description": "A comma-separated list of channels to filter to.",
              "name": "channel_ids",
              "type": "string",
            },
            "cursor": {
              "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
              "name": "limit",
              "type": "integer",
            },
            "team_ids": {
              "description": "A comma-separated list of the workspaces to which the channels you would like returned belong.",
              "name": "team_ids",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_ekm_listOriginalConnectedChannelInfo",
  },
  {
    "description": "GET /admin.conversations.getConversationPrefs - Get conversation preferences for a public or private channel.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "channel_id": {
              "description": "The channel to get preferences for.",
              "name": "channel_id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_getConversationPrefs",
  },
  {
    "description": "GET /admin.conversations.getTeams - Get all the workspaces a given public or private channel is connected to within this Enterprise org.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "channel_id": {
              "description": "The channel to determine connected workspaces within the organization for.",
              "name": "channel_id",
              "type": "string",
            },
            "cursor": {
              "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
              "name": "limit",
              "type": "integer",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_getTeams",
  },
  {
    "description": "POST /admin.conversations.invite - Invite a user to a public or private channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_id": {
              "description": "The channel that the users will be invited to.",
              "type": "string",
            },
            "user_ids": {
              "description": "The users to invite.",
              "type": "string",
            },
          },
          "required": [
            "user_ids",
            "channel_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_invite",
  },
  {
    "description": "POST /admin.conversations.rename - Rename a public or private channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_id": {
              "description": "The channel to rename.",
              "type": "string",
            },
            "name": {
              "type": "string",
            },
          },
          "required": [
            "channel_id",
            "name",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_rename",
  },
  {
    "description": "POST /admin.conversations.restrictAccess.addGroup - Add an allowlist of IDP groups for accessing a channel",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_id": {
              "description": "The channel to link this group to.",
              "type": "string",
            },
            "group_id": {
              "description": "The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.",
              "type": "string",
            },
            "team_id": {
              "description": "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:write`",
              "type": "string",
            },
          },
          "required": [
            "token",
            "group_id",
            "channel_id",
          ],
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_restrictAccess_addGroup",
  },
  {
    "description": "GET /admin.conversations.restrictAccess.listGroups - List all IDP Groups linked to a channel",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "channel_id": {
              "description": "",
              "name": "channel_id",
              "type": "string",
            },
            "team_id": {
              "description": "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.",
              "name": "team_id",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_restrictAccess_listGroups",
  },
  {
    "description": "POST /admin.conversations.restrictAccess.removeGroup - Remove a linked IDP group linked from a private channel",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_id": {
              "description": "The channel to remove the linked group from.",
              "type": "string",
            },
            "group_id": {
              "description": "The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.",
              "type": "string",
            },
            "team_id": {
              "description": "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:write`",
              "type": "string",
            },
          },
          "required": [
            "token",
            "team_id",
            "group_id",
            "channel_id",
          ],
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_restrictAccess_removeGroup",
  },
  {
    "description": "GET /admin.conversations.search - Search for public or private channels in an Enterprise organization.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "cursor": {
              "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.",
              "name": "limit",
              "type": "integer",
            },
            "query": {
              "description": "Name of the the channel to query by.",
              "name": "query",
              "type": "string",
            },
            "search_channel_types": {
              "description": "The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types).",
              "name": "search_channel_types",
              "type": "string",
            },
            "sort": {
              "description": "Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted ",
              "name": "sort",
              "type": "string",
            },
            "sort_dir": {
              "description": "Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)",
              "name": "sort_dir",
              "type": "string",
            },
            "team_ids": {
              "description": "Comma separated string of team IDs, signifying the workspaces to search through.",
              "name": "team_ids",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_search",
  },
  {
    "description": "POST /admin.conversations.setConversationPrefs - Set the posting permissions for a public or private channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_id": {
              "description": "The channel to set the prefs for",
              "type": "string",
            },
            "prefs": {
              "description": "The prefs for this channel in a stringified JSON format.",
              "type": "string",
            },
          },
          "required": [
            "channel_id",
            "prefs",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_setConversationPrefs",
  },
  {
    "description": "POST /admin.conversations.setTeams - Set the workspaces in an Enterprise grid org that connect to a public or private channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_id": {
              "description": "The encoded `channel_id` to add or remove to workspaces.",
              "type": "string",
            },
            "org_channel": {
              "description": "True if channel has to be converted to an org channel",
              "type": "boolean",
            },
            "target_team_ids": {
              "description": "A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.",
              "type": "string",
            },
            "team_id": {
              "description": "The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.",
              "type": "string",
            },
          },
          "required": [
            "channel_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_setTeams",
  },
  {
    "description": "POST /admin.conversations.unarchive - Unarchive a public or private channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_id": {
              "description": "The channel to unarchive.",
              "type": "string",
            },
          },
          "required": [
            "channel_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_conversations_unarchive",
  },
  {
    "description": "POST /admin.emoji.add - Add an emoji.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "name": {
              "description": "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:write`",
              "type": "string",
            },
            "url": {
              "description": "The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.",
              "type": "string",
            },
          },
          "required": [
            "token",
            "name",
            "url",
          ],
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_emoji_add",
  },
  {
    "description": "POST /admin.emoji.addAlias - Add an emoji alias.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "alias_for": {
              "description": "The alias of the emoji.",
              "type": "string",
            },
            "name": {
              "description": "The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:write`",
              "type": "string",
            },
          },
          "required": [
            "token",
            "name",
            "alias_for",
          ],
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_emoji_addAlias",
  },
  {
    "description": "GET /admin.emoji.list - List emoji for an Enterprise Grid organization.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "cursor": {
              "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
              "name": "limit",
              "type": "integer",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_emoji_list",
  },
  {
    "description": "POST /admin.emoji.remove - Remove an emoji across an Enterprise Grid organization",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "name": {
              "description": "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:write`",
              "type": "string",
            },
          },
          "required": [
            "token",
            "name",
          ],
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_emoji_remove",
  },
  {
    "description": "POST /admin.emoji.rename - Rename an emoji.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "name": {
              "description": "The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included.",
              "type": "string",
            },
            "new_name": {
              "description": "The new name of the emoji.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:write`",
              "type": "string",
            },
          },
          "required": [
            "token",
            "name",
            "new_name",
          ],
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_emoji_rename",
  },
  {
    "description": "POST /admin.inviteRequests.approve - Approve a workspace invite request.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "invite_request_id": {
              "description": "ID of the request to invite.",
              "type": "string",
            },
            "team_id": {
              "description": "ID for the workspace where the invite request was made.",
              "type": "string",
            },
          },
          "required": [
            "invite_request_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.invites:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_inviteRequests_approve",
  },
  {
    "description": "GET /admin.inviteRequests.approved.list - List all approved workspace invite requests.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.invites:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "cursor": {
              "description": "Value of the `next_cursor` field sent as part of the previous API response",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive",
              "name": "limit",
              "type": "integer",
            },
            "team_id": {
              "description": "ID for the workspace where the invite requests were made.",
              "name": "team_id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_inviteRequests_approved_list",
  },
  {
    "description": "GET /admin.inviteRequests.denied.list - List all denied workspace invite requests.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.invites:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "cursor": {
              "description": "Value of the `next_cursor` field sent as part of the previous api response",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive",
              "name": "limit",
              "type": "integer",
            },
            "team_id": {
              "description": "ID for the workspace where the invite requests were made.",
              "name": "team_id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_inviteRequests_denied_list",
  },
  {
    "description": "POST /admin.inviteRequests.deny - Deny a workspace invite request.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "invite_request_id": {
              "description": "ID of the request to invite.",
              "type": "string",
            },
            "team_id": {
              "description": "ID for the workspace where the invite request was made.",
              "type": "string",
            },
          },
          "required": [
            "invite_request_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.invites:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_inviteRequests_deny",
  },
  {
    "description": "GET /admin.inviteRequests.list - List all pending workspace invite requests.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.invites:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "cursor": {
              "description": "Value of the `next_cursor` field sent as part of the previous API response",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive",
              "name": "limit",
              "type": "integer",
            },
            "team_id": {
              "description": "ID for the workspace where the invite requests were made.",
              "name": "team_id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_inviteRequests_list",
  },
  {
    "description": "GET /admin.teams.admins.list - List all of the admins on a given workspace.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "cursor": {
              "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return.",
              "name": "limit",
              "type": "integer",
            },
            "team_id": {
              "description": "",
              "name": "team_id",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_teams_admins_list",
  },
  {
    "description": "POST /admin.teams.create - Create an Enterprise team.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "team_description": {
              "description": "Description for the team.",
              "type": "string",
            },
            "team_discoverability": {
              "description": "Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`.",
              "type": "string",
            },
            "team_domain": {
              "description": "Team domain (for example, slacksoftballteam).",
              "type": "string",
            },
            "team_name": {
              "description": "Team name (for example, Slack Softball Team).",
              "type": "string",
            },
          },
          "required": [
            "team_domain",
            "team_name",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_teams_create",
  },
  {
    "description": "GET /admin.teams.list - List all teams on an Enterprise organization",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "cursor": {
              "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return. Must be between 1 - 100 both inclusive.",
              "name": "limit",
              "type": "integer",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_teams_list",
  },
  {
    "description": "GET /admin.teams.owners.list - List all of the owners on a given workspace.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "cursor": {
              "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive.",
              "name": "limit",
              "type": "integer",
            },
            "team_id": {
              "description": "",
              "name": "team_id",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_teams_owners_list",
  },
  {
    "description": "GET /admin.teams.settings.info - Fetch information about settings in a workspace",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "team_id": {
              "description": "",
              "name": "team_id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_teams_settings_info",
  },
  {
    "description": "POST /admin.teams.settings.setDefaultChannels - Set the default channels of a workspace.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_ids": {
              "description": "An array of channel IDs.",
              "type": "string",
            },
            "team_id": {
              "description": "ID for the workspace to set the default channel for.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:write`",
              "type": "string",
            },
          },
          "required": [
            "token",
            "team_id",
            "channel_ids",
          ],
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_teams_settings_setDefaultChannels",
  },
  {
    "description": "POST /admin.teams.settings.setDescription - Set the description of a given workspace.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "description": {
              "description": "The new description for the workspace.",
              "type": "string",
            },
            "team_id": {
              "description": "ID for the workspace to set the description for.",
              "type": "string",
            },
          },
          "required": [
            "team_id",
            "description",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_teams_settings_setDescription",
  },
  {
    "description": "POST /admin.teams.settings.setDiscoverability - An API method that allows admins to set the discoverability of a given workspace",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "discoverability": {
              "description": "This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`.",
              "type": "string",
            },
            "team_id": {
              "description": "The ID of the workspace to set discoverability on.",
              "type": "string",
            },
          },
          "required": [
            "team_id",
            "discoverability",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_teams_settings_setDiscoverability",
  },
  {
    "description": "POST /admin.teams.settings.setIcon - Sets the icon of a workspace.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "image_url": {
              "description": "Image URL for the icon",
              "type": "string",
            },
            "team_id": {
              "description": "ID for the workspace to set the icon for.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:write`",
              "type": "string",
            },
          },
          "required": [
            "token",
            "image_url",
            "team_id",
          ],
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_teams_settings_setIcon",
  },
  {
    "description": "POST /admin.teams.settings.setName - Set the name of a given workspace.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "name": {
              "description": "The new name of the workspace.",
              "type": "string",
            },
            "team_id": {
              "description": "ID for the workspace to set the name for.",
              "type": "string",
            },
          },
          "required": [
            "team_id",
            "name",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_teams_settings_setName",
  },
  {
    "description": "POST /admin.usergroups.addChannels - Add one or more default channels to an IDP group.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_ids": {
              "description": "Comma separated string of channel IDs.",
              "type": "string",
            },
            "team_id": {
              "description": "The workspace to add default channels in.",
              "type": "string",
            },
            "usergroup_id": {
              "description": "ID of the IDP group to add default channels for.",
              "type": "string",
            },
          },
          "required": [
            "usergroup_id",
            "channel_ids",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.usergroups:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_usergroups_addChannels",
  },
  {
    "description": "POST /admin.usergroups.addTeams - Associate one or more default workspaces with an organization-wide IDP group.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "auto_provision": {
              "description": "When `true`, this method automatically creates new workspace accounts for the IDP group members.",
              "type": "boolean",
            },
            "team_ids": {
              "description": "A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.",
              "type": "string",
            },
            "usergroup_id": {
              "description": "An encoded usergroup (IDP Group) ID.",
              "type": "string",
            },
          },
          "required": [
            "usergroup_id",
            "team_ids",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.teams:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_usergroups_addTeams",
  },
  {
    "description": "GET /admin.usergroups.listChannels - List the channels linked to an org-level IDP group (user group).",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.usergroups:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "include_num_members": {
              "description": "Flag to include or exclude the count of members per channel.",
              "name": "include_num_members",
              "type": "boolean",
            },
            "team_id": {
              "description": "ID of the the workspace.",
              "name": "team_id",
              "type": "string",
            },
            "usergroup_id": {
              "description": "ID of the IDP group to list default channels for.",
              "name": "usergroup_id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_usergroups_listChannels",
  },
  {
    "description": "POST /admin.usergroups.removeChannels - Remove one or more default channels from an org-level IDP group (user group).",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_ids": {
              "description": "Comma-separated string of channel IDs",
              "type": "string",
            },
            "usergroup_id": {
              "description": "ID of the IDP Group",
              "type": "string",
            },
          },
          "required": [
            "usergroup_id",
            "channel_ids",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.usergroups:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_usergroups_removeChannels",
  },
  {
    "description": "POST /admin.users.assign - Add an Enterprise user to a workspace.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_ids": {
              "description": "Comma separated values of channel IDs to add user in the new workspace.",
              "type": "string",
            },
            "is_restricted": {
              "description": "True if user should be added to the workspace as a guest.",
              "type": "boolean",
            },
            "is_ultra_restricted": {
              "description": "True if user should be added to the workspace as a single-channel guest.",
              "type": "boolean",
            },
            "team_id": {
              "description": "The ID (`T1234`) of the workspace.",
              "type": "string",
            },
            "user_id": {
              "description": "The ID of the user to add to the workspace.",
              "type": "string",
            },
          },
          "required": [
            "team_id",
            "user_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.users:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_users_assign",
  },
  {
    "description": "POST /admin.users.invite - Invite a user to a workspace.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel_ids": {
              "description": "A comma-separated list of `channel_id`s for this user to join. At least one channel is required.",
              "type": "string",
            },
            "custom_message": {
              "description": "An optional message to send to the user in the invite email.",
              "type": "string",
            },
            "email": {
              "description": "The email address of the person to invite.",
              "type": "string",
            },
            "guest_expiration_ts": {
              "description": "Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.",
              "type": "string",
            },
            "is_restricted": {
              "description": "Is this user a multi-channel guest user? (default: false)",
              "type": "boolean",
            },
            "is_ultra_restricted": {
              "description": "Is this user a single channel guest user? (default: false)",
              "type": "boolean",
            },
            "real_name": {
              "description": "Full name of the user.",
              "type": "string",
            },
            "resend": {
              "description": "Allow this invite to be resent in the future if a user has not signed up yet. (default: false)",
              "type": "boolean",
            },
            "team_id": {
              "description": "The ID (`T1234`) of the workspace.",
              "type": "string",
            },
          },
          "required": [
            "team_id",
            "email",
            "channel_ids",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.users:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_users_invite",
  },
  {
    "description": "GET /admin.users.list - List users on a workspace",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.users:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "cursor": {
              "description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "Limit for how many users to be retrieved per page",
              "name": "limit",
              "type": "integer",
            },
            "team_id": {
              "description": "The ID (`T1234`) of the workspace.",
              "name": "team_id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_users_list",
  },
  {
    "description": "POST /admin.users.remove - Remove a user from a workspace.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "team_id": {
              "description": "The ID (`T1234`) of the workspace.",
              "type": "string",
            },
            "user_id": {
              "description": "The ID of the user to remove.",
              "type": "string",
            },
          },
          "required": [
            "team_id",
            "user_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.users:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_users_remove",
  },
  {
    "description": "POST /admin.users.session.invalidate - Invalidate a single session for a user by session_id",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "session_id": {
              "type": "integer",
            },
            "team_id": {
              "description": "ID of the team that the session belongs to",
              "type": "string",
            },
          },
          "required": [
            "team_id",
            "session_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.users:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_users_session_invalidate",
  },
  {
    "description": "POST /admin.users.session.reset - Wipes all valid sessions on all devices for a given user",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "mobile_only": {
              "description": "Only expire mobile sessions (default: false)",
              "type": "boolean",
            },
            "user_id": {
              "description": "The ID of the user to wipe sessions for",
              "type": "string",
            },
            "web_only": {
              "description": "Only expire web sessions (default: false)",
              "type": "boolean",
            },
          },
          "required": [
            "user_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.users:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_users_session_reset",
  },
  {
    "description": "POST /admin.users.setAdmin - Set an existing guest, regular user, or owner to be an admin user.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "team_id": {
              "description": "The ID (`T1234`) of the workspace.",
              "type": "string",
            },
            "user_id": {
              "description": "The ID of the user to designate as an admin.",
              "type": "string",
            },
          },
          "required": [
            "team_id",
            "user_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.users:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_users_setAdmin",
  },
  {
    "description": "POST /admin.users.setExpiration - Set an expiration for a guest user",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "expiration_ts": {
              "description": "Timestamp when guest account should be disabled.",
              "type": "integer",
            },
            "team_id": {
              "description": "The ID (`T1234`) of the workspace.",
              "type": "string",
            },
            "user_id": {
              "description": "The ID of the user to set an expiration for.",
              "type": "string",
            },
          },
          "required": [
            "team_id",
            "user_id",
            "expiration_ts",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.users:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_users_setExpiration",
  },
  {
    "description": "POST /admin.users.setOwner - Set an existing guest, regular user, or admin user to be a workspace owner.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "team_id": {
              "description": "The ID (`T1234`) of the workspace.",
              "type": "string",
            },
            "user_id": {
              "description": "Id of the user to promote to owner.",
              "type": "string",
            },
          },
          "required": [
            "team_id",
            "user_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.users:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_users_setOwner",
  },
  {
    "description": "POST /admin.users.setRegular - Set an existing guest user, admin user, or owner to be a regular user.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "team_id": {
              "description": "The ID (`T1234`) of the workspace.",
              "type": "string",
            },
            "user_id": {
              "description": "The ID of the user to designate as a regular user.",
              "type": "string",
            },
          },
          "required": [
            "team_id",
            "user_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin.users:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "admin_users_setRegular",
  },
  {
    "description": "GET /api.test - Checks API calling code.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "error": {
              "description": "Error response to return",
              "name": "error",
              "type": "string",
            },
            "foo": {
              "description": "example property to return",
              "name": "foo",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "api_test",
  },
  {
    "description": "GET /apps.event.authorizations.list - Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `authorizations:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "cursor": {
              "description": "",
              "name": "cursor",
              "type": "string",
            },
            "event_context": {
              "description": "",
              "name": "event_context",
              "type": "string",
            },
            "limit": {
              "description": "",
              "name": "limit",
              "type": "integer",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "apps_event_authorizations_list",
  },
  {
    "description": "GET /apps.permissions.info - Returns list of permissions this app has on a team.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "apps_permissions_info",
  },
  {
    "description": "GET /apps.permissions.request - Allows an app to request additional scopes",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "scopes": {
              "description": "A comma separated list of scopes to request for",
              "name": "scopes",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
            "trigger_id": {
              "description": "Token used to trigger the permissions API",
              "name": "trigger_id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "apps_permissions_request",
  },
  {
    "description": "GET /apps.permissions.resources.list - Returns list of resource grants this app has on a team.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "cursor": {
              "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return.",
              "name": "limit",
              "type": "integer",
            },
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "apps_permissions_resources_list",
  },
  {
    "description": "GET /apps.permissions.scopes.list - Returns list of scopes this app has on a team.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "apps_permissions_scopes_list",
  },
  {
    "description": "GET /apps.permissions.users.list - Returns list of user grants and corresponding scopes this app has on a team.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "cursor": {
              "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return.",
              "name": "limit",
              "type": "integer",
            },
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "apps_permissions_users_list",
  },
  {
    "description": "GET /apps.permissions.users.request - Enables an app to trigger a permissions modal to grant an app access to a user access scope.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "scopes": {
              "description": "A comma separated list of user scopes to request for",
              "name": "scopes",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
            "trigger_id": {
              "description": "Token used to trigger the request",
              "name": "trigger_id",
              "type": "string",
            },
            "user": {
              "description": "The user this scope is being requested for",
              "name": "user",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "apps_permissions_users_request",
  },
  {
    "description": "GET /apps.uninstall - Uninstalls your app from a workspace.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "client_id": {
              "description": "Issued when you created your application.",
              "name": "client_id",
              "type": "string",
            },
            "client_secret": {
              "description": "Issued when you created your application.",
              "name": "client_secret",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "apps_uninstall",
  },
  {
    "description": "GET /auth.revoke - Revokes a token.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "test": {
              "description": "Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked.",
              "name": "test",
              "type": "boolean",
            },
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "auth_revoke",
  },
  {
    "description": "GET /auth.test - Checks authentication & identity.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "auth_test",
  },
  {
    "description": "GET /bots.info - Gets information about a bot user.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "bot": {
              "description": "Bot user to get info on",
              "name": "bot",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `users:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "bots_info",
  },
  {
    "description": "POST /calls.add - Registers a new Call.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "created_by": {
              "description": "The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required.",
              "type": "string",
            },
            "date_start": {
              "description": "Call start time in UTC UNIX timestamp format",
              "type": "integer",
            },
            "desktop_app_join_url": {
              "description": "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.",
              "type": "string",
            },
            "external_display_id": {
              "description": "An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object.",
              "type": "string",
            },
            "external_unique_id": {
              "description": "An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service.",
              "type": "string",
            },
            "join_url": {
              "description": "The URL required for a client to join the Call.",
              "type": "string",
            },
            "title": {
              "description": "The name of the Call.",
              "type": "string",
            },
            "users": {
              "description": "The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users).",
              "type": "string",
            },
          },
          "required": [
            "external_unique_id",
            "join_url",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `calls:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "calls_add",
  },
  {
    "description": "POST /calls.end - Ends a Call.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "duration": {
              "description": "Call duration in seconds",
              "type": "integer",
            },
            "id": {
              "description": "`id` returned when registering the call using the [`calls.add`](/methods/calls.add) method.",
              "type": "string",
            },
          },
          "required": [
            "id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `calls:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "calls_end",
  },
  {
    "description": "GET /calls.info - Returns information about a Call.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `calls:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "id": {
              "description": "`id` of the Call returned by the [`calls.add`](/methods/calls.add) method.",
              "name": "id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "calls_info",
  },
  {
    "description": "POST /calls.participants.add - Registers new participants added to a Call.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "id": {
              "description": "`id` returned by the [`calls.add`](/methods/calls.add) method.",
              "type": "string",
            },
            "users": {
              "description": "The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users).",
              "type": "string",
            },
          },
          "required": [
            "id",
            "users",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `calls:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "calls_participants_add",
  },
  {
    "description": "POST /calls.participants.remove - Registers participants removed from a Call.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "id": {
              "description": "`id` returned by the [`calls.add`](/methods/calls.add) method.",
              "type": "string",
            },
            "users": {
              "description": "The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users).",
              "type": "string",
            },
          },
          "required": [
            "id",
            "users",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `calls:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "calls_participants_remove",
  },
  {
    "description": "POST /calls.update - Updates information about a Call.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "desktop_app_join_url": {
              "description": "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.",
              "type": "string",
            },
            "id": {
              "description": "`id` returned by the [`calls.add`](/methods/calls.add) method.",
              "type": "string",
            },
            "join_url": {
              "description": "The URL required for a client to join the Call.",
              "type": "string",
            },
            "title": {
              "description": "The name of the Call.",
              "type": "string",
            },
          },
          "required": [
            "id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `calls:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "calls_update",
  },
  {
    "description": "POST /chat.delete - Deletes a message.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "as_user": {
              "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.",
              "type": "boolean",
            },
            "channel": {
              "description": "Channel containing the message to be deleted.",
              "type": "string",
            },
            "ts": {
              "description": "Timestamp of the message to be deleted.",
              "type": "number",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `chat:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "chat_delete",
  },
  {
    "description": "POST /chat.deleteScheduledMessage - Deletes a pending scheduled message from the queue.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "as_user": {
              "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.",
              "type": "boolean",
            },
            "channel": {
              "description": "The channel the scheduled_message is posting to",
              "type": "string",
            },
            "scheduled_message_id": {
              "description": "`scheduled_message_id` returned from call to chat.scheduleMessage",
              "type": "string",
            },
          },
          "required": [
            "channel",
            "scheduled_message_id",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `chat:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "chat_deleteScheduledMessage",
  },
  {
    "description": "GET /chat.getPermalink - Retrieve a permalink URL for a specific extant message",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "channel": {
              "description": "The ID of the conversation or channel containing the message",
              "name": "channel",
              "type": "string",
            },
            "message_ts": {
              "description": "A message's `ts` value, uniquely identifying it within a channel",
              "name": "message_ts",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "chat_getPermalink",
  },
  {
    "description": "POST /chat.meMessage - Share a me message into a channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.",
              "type": "string",
            },
            "text": {
              "description": "Text of the message to send.",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `chat:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "chat_meMessage",
  },
  {
    "description": "POST /chat.postEphemeral - Sends an ephemeral message to a user in a channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "as_user": {
              "description": "Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.",
              "type": "boolean",
            },
            "attachments": {
              "description": "A JSON-based array of structured attachments, presented as a URL-encoded string.",
              "type": "string",
            },
            "blocks": {
              "description": "A JSON-based array of structured blocks, presented as a URL-encoded string.",
              "type": "string",
            },
            "channel": {
              "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.",
              "type": "string",
            },
            "icon_emoji": {
              "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.",
              "type": "string",
            },
            "icon_url": {
              "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
              "type": "string",
            },
            "link_names": {
              "description": "Find and link channel names and usernames.",
              "type": "boolean",
            },
            "parse": {
              "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting).",
              "type": "string",
            },
            "text": {
              "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.",
              "type": "string",
            },
            "thread_ts": {
              "description": "Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread.",
              "type": "string",
            },
            "user": {
              "description": "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument.",
              "type": "string",
            },
            "username": {
              "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
              "type": "string",
            },
          },
          "required": [
            "channel",
            "user",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `chat:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "chat_postEphemeral",
  },
  {
    "description": "POST /chat.postMessage - Sends a message to a channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "as_user": {
              "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.",
              "type": "string",
            },
            "attachments": {
              "description": "A JSON-based array of structured attachments, presented as a URL-encoded string.",
              "type": "string",
            },
            "blocks": {
              "description": "A JSON-based array of structured blocks, presented as a URL-encoded string.",
              "type": "string",
            },
            "channel": {
              "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.",
              "type": "string",
            },
            "icon_emoji": {
              "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.",
              "type": "string",
            },
            "icon_url": {
              "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
              "type": "string",
            },
            "link_names": {
              "description": "Find and link channel names and usernames.",
              "type": "boolean",
            },
            "mrkdwn": {
              "description": "Disable Slack markup parsing by setting to `false`. Enabled by default.",
              "type": "boolean",
            },
            "parse": {
              "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting).",
              "type": "string",
            },
            "reply_broadcast": {
              "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.",
              "type": "boolean",
            },
            "text": {
              "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.",
              "type": "string",
            },
            "thread_ts": {
              "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.",
              "type": "string",
            },
            "unfurl_links": {
              "description": "Pass true to enable unfurling of primarily text-based content.",
              "type": "boolean",
            },
            "unfurl_media": {
              "description": "Pass false to disable unfurling of media content.",
              "type": "boolean",
            },
            "username": {
              "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
              "type": "string",
            },
          },
          "required": [
            "channel",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `chat:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "chat_postMessage",
  },
  {
    "description": "POST /chat.scheduleMessage - Schedules a message to be sent to a channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "as_user": {
              "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship).",
              "type": "boolean",
            },
            "attachments": {
              "description": "A JSON-based array of structured attachments, presented as a URL-encoded string.",
              "type": "string",
            },
            "blocks": {
              "description": "A JSON-based array of structured blocks, presented as a URL-encoded string.",
              "type": "string",
            },
            "channel": {
              "description": "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.",
              "type": "string",
            },
            "link_names": {
              "description": "Find and link channel names and usernames.",
              "type": "boolean",
            },
            "parse": {
              "description": "Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting).",
              "type": "string",
            },
            "post_at": {
              "description": "Unix EPOCH timestamp of time in future to send the message.",
              "type": "string",
            },
            "reply_broadcast": {
              "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.",
              "type": "boolean",
            },
            "text": {
              "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.",
              "type": "string",
            },
            "thread_ts": {
              "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.",
              "type": "number",
            },
            "unfurl_links": {
              "description": "Pass true to enable unfurling of primarily text-based content.",
              "type": "boolean",
            },
            "unfurl_media": {
              "description": "Pass false to disable unfurling of media content.",
              "type": "boolean",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `chat:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "chat_scheduleMessage",
  },
  {
    "description": "GET /chat.scheduledMessages.list - Returns a list of scheduled messages.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "channel": {
              "description": "The channel of the scheduled messages",
              "name": "channel",
              "type": "string",
            },
            "cursor": {
              "description": "For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.",
              "name": "cursor",
              "type": "string",
            },
            "latest": {
              "description": "A UNIX timestamp of the latest value in the time range",
              "name": "latest",
              "type": "number",
            },
            "limit": {
              "description": "Maximum number of original entries to return.",
              "name": "limit",
              "type": "integer",
            },
            "oldest": {
              "description": "A UNIX timestamp of the oldest value in the time range",
              "name": "oldest",
              "type": "number",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "chat_scheduledMessages_list",
  },
  {
    "description": "POST /chat.unfurl - Provide custom unfurl behavior for user-posted URLs",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Channel ID of the message",
              "type": "string",
            },
            "ts": {
              "description": "Timestamp of the message to add unfurl behavior to.",
              "type": "string",
            },
            "unfurls": {
              "description": "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.",
              "type": "string",
            },
            "user_auth_message": {
              "description": "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior",
              "type": "string",
            },
            "user_auth_required": {
              "description": "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain",
              "type": "boolean",
            },
            "user_auth_url": {
              "description": "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.",
              "type": "string",
            },
          },
          "required": [
            "channel",
            "ts",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `links:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "chat_unfurl",
  },
  {
    "description": "POST /chat.update - Updates a message.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "as_user": {
              "description": "Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.",
              "type": "string",
            },
            "attachments": {
              "description": "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field.",
              "type": "string",
            },
            "blocks": {
              "description": "A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field.",
              "type": "string",
            },
            "channel": {
              "description": "Channel containing the message to be updated.",
              "type": "string",
            },
            "link_names": {
              "description": "Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`.",
              "type": "string",
            },
            "parse": {
              "description": "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`.",
              "type": "string",
            },
            "text": {
              "description": "New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`.",
              "type": "string",
            },
            "ts": {
              "description": "Timestamp of the message to be updated.",
              "type": "string",
            },
          },
          "required": [
            "channel",
            "ts",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `chat:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "chat_update",
  },
  {
    "description": "POST /conversations.archive - Archives a conversation.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "ID of conversation to archive",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_archive",
  },
  {
    "description": "POST /conversations.close - Closes a direct message or multi-person direct message.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Conversation to close.",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_close",
  },
  {
    "description": "POST /conversations.create - Initiates a public or private channel-based conversation",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "is_private": {
              "description": "Create a private channel instead of a public one",
              "type": "boolean",
            },
            "name": {
              "description": "Name of the public or private channel to create",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_create",
  },
  {
    "description": "GET /conversations.history - Fetches a conversation's history of messages and events.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "channel": {
              "description": "Conversation ID to fetch history for.",
              "name": "channel",
              "type": "string",
            },
            "cursor": {
              "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.",
              "name": "cursor",
              "type": "string",
            },
            "inclusive": {
              "description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified.",
              "name": "inclusive",
              "type": "boolean",
            },
            "latest": {
              "description": "End of time range of messages to include in results.",
              "name": "latest",
              "type": "number",
            },
            "limit": {
              "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
              "name": "limit",
              "type": "integer",
            },
            "oldest": {
              "description": "Start of time range of messages to include in results.",
              "name": "oldest",
              "type": "number",
            },
            "token": {
              "description": "Authentication token. Requires scope: `conversations:history`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_history",
  },
  {
    "description": "GET /conversations.info - Retrieve information about a conversation.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "channel": {
              "description": "Conversation ID to learn more about",
              "name": "channel",
              "type": "string",
            },
            "include_locale": {
              "description": "Set this to `true` to receive the locale for this conversation. Defaults to `false`",
              "name": "include_locale",
              "type": "boolean",
            },
            "include_num_members": {
              "description": "Set to `true` to include the member count for the specified conversation. Defaults to `false`",
              "name": "include_num_members",
              "type": "boolean",
            },
            "token": {
              "description": "Authentication token. Requires scope: `conversations:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_info",
  },
  {
    "description": "POST /conversations.invite - Invites users to a channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "The ID of the public or private channel to invite user(s) to.",
              "type": "string",
            },
            "users": {
              "description": "A comma separated list of user IDs. Up to 1000 users may be listed.",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_invite",
  },
  {
    "description": "POST /conversations.join - Joins an existing conversation.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "ID of conversation to join",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `channels:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_join",
  },
  {
    "description": "POST /conversations.kick - Removes a user from a conversation.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "ID of conversation to remove user from.",
              "type": "string",
            },
            "user": {
              "description": "User ID to be removed.",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_kick",
  },
  {
    "description": "POST /conversations.leave - Leaves a conversation.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Conversation to leave",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_leave",
  },
  {
    "description": "GET /conversations.list - Lists all channels in a Slack team.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "cursor": {
              "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.",
              "name": "cursor",
              "type": "string",
            },
            "exclude_archived": {
              "description": "Set to `true` to exclude archived channels from the list",
              "name": "exclude_archived",
              "type": "boolean",
            },
            "limit": {
              "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.",
              "name": "limit",
              "type": "integer",
            },
            "token": {
              "description": "Authentication token. Requires scope: `conversations:read`",
              "name": "token",
              "type": "string",
            },
            "types": {
              "description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`",
              "name": "types",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_list",
  },
  {
    "description": "POST /conversations.mark - Sets the read cursor in a channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Channel or conversation to set the read cursor for.",
              "type": "string",
            },
            "ts": {
              "description": "Unique identifier of message you want marked as most recently seen in this conversation.",
              "type": "number",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_mark",
  },
  {
    "description": "GET /conversations.members - Retrieve members of a conversation.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "channel": {
              "description": "ID of the conversation to retrieve members for",
              "name": "channel",
              "type": "string",
            },
            "cursor": {
              "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
              "name": "limit",
              "type": "integer",
            },
            "token": {
              "description": "Authentication token. Requires scope: `conversations:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_members",
  },
  {
    "description": "POST /conversations.open - Opens or resumes a direct message or multi-person direct message.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead.",
              "type": "string",
            },
            "return_im": {
              "description": "Boolean, indicates you want the full IM channel definition in the response.",
              "type": "boolean",
            },
            "users": {
              "description": "Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`.",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_open",
  },
  {
    "description": "POST /conversations.rename - Renames a conversation.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "ID of conversation to rename",
              "type": "string",
            },
            "name": {
              "description": "New name for conversation.",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_rename",
  },
  {
    "description": "GET /conversations.replies - Retrieve a thread of messages posted to a conversation",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "channel": {
              "description": "Conversation ID to fetch thread from.",
              "name": "channel",
              "type": "string",
            },
            "cursor": {
              "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.",
              "name": "cursor",
              "type": "string",
            },
            "inclusive": {
              "description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified.",
              "name": "inclusive",
              "type": "boolean",
            },
            "latest": {
              "description": "End of time range of messages to include in results.",
              "name": "latest",
              "type": "number",
            },
            "limit": {
              "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
              "name": "limit",
              "type": "integer",
            },
            "oldest": {
              "description": "Start of time range of messages to include in results.",
              "name": "oldest",
              "type": "number",
            },
            "token": {
              "description": "Authentication token. Requires scope: `conversations:history`",
              "name": "token",
              "type": "string",
            },
            "ts": {
              "description": "Unique identifier of a thread's parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message.",
              "name": "ts",
              "type": "number",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_replies",
  },
  {
    "description": "POST /conversations.setPurpose - Sets the purpose for a conversation.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Conversation to set the purpose of",
              "type": "string",
            },
            "purpose": {
              "description": "A new, specialer purpose",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_setPurpose",
  },
  {
    "description": "POST /conversations.setTopic - Sets the topic for a conversation.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Conversation to set the topic of",
              "type": "string",
            },
            "topic": {
              "description": "The new topic string. Does not support formatting or linkification.",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_setTopic",
  },
  {
    "description": "POST /conversations.unarchive - Reverses conversation archival.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "ID of conversation to unarchive",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `conversations:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "conversations_unarchive",
  },
  {
    "description": "GET /dialog.open - Open a dialog with a user",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "dialog": {
              "description": "The dialog definition. This must be a JSON-encoded string.",
              "name": "dialog",
              "type": "string",
            },
            "trigger_id": {
              "description": "Exchange a trigger to post to the user.",
              "name": "trigger_id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "dialog_open",
  },
  {
    "description": "POST /dnd.endDnd - Ends the current user's Do Not Disturb session immediately.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `dnd:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "dnd_endDnd",
  },
  {
    "description": "POST /dnd.endSnooze - Ends the current user's snooze mode immediately.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `dnd:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "dnd_endSnooze",
  },
  {
    "description": "GET /dnd.info - Retrieves a user's current Do Not Disturb status.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `dnd:read`",
              "name": "token",
              "type": "string",
            },
            "user": {
              "description": "User to fetch status for (defaults to current user)",
              "name": "user",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "dnd_info",
  },
  {
    "description": "POST /dnd.setSnooze - Turns on Do Not Disturb mode for the current user, or changes its duration.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "num_minutes": {
              "description": "Number of minutes, from now, to snooze until.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `dnd:write`",
              "type": "string",
            },
          },
          "required": [
            "token",
            "num_minutes",
          ],
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "dnd_setSnooze",
  },
  {
    "description": "GET /dnd.teamInfo - Retrieves the Do Not Disturb status for up to 50 users on a team.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `dnd:read`",
              "name": "token",
              "type": "string",
            },
            "users": {
              "description": "Comma-separated list of users to fetch Do Not Disturb status for",
              "name": "users",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "dnd_teamInfo",
  },
  {
    "description": "GET /emoji.list - Lists custom emoji for a team.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `emoji:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "emoji_list",
  },
  {
    "description": "POST /files.comments.delete - Deletes an existing comment on a file.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "file": {
              "description": "File to delete a comment from.",
              "type": "string",
            },
            "id": {
              "description": "The comment to delete.",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `files:write:user`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "files_comments_delete",
  },
  {
    "description": "POST /files.delete - Deletes a file.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "file": {
              "description": "ID of file to delete.",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `files:write:user`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "files_delete",
  },
  {
    "description": "GET /files.info - Gets information about a file.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "count": {
              "description": "",
              "name": "count",
              "type": "string",
            },
            "cursor": {
              "description": "Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection of comments. See [pagination](/docs/pagination) for more details.",
              "name": "cursor",
              "type": "string",
            },
            "file": {
              "description": "Specify a file by providing its ID.",
              "name": "file",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.",
              "name": "limit",
              "type": "integer",
            },
            "page": {
              "description": "",
              "name": "page",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `files:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "files_info",
  },
  {
    "description": "GET /files.list - List for a team, in a channel, or from a user with applied filters.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "channel": {
              "description": "Filter files appearing in a specific channel, indicated by its ID.",
              "name": "channel",
              "type": "string",
            },
            "count": {
              "description": "",
              "name": "count",
              "type": "string",
            },
            "page": {
              "description": "",
              "name": "page",
              "type": "string",
            },
            "show_files_hidden_by_limit": {
              "description": "Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit.",
              "name": "show_files_hidden_by_limit",
              "type": "boolean",
            },
            "token": {
              "description": "Authentication token. Requires scope: `files:read`",
              "name": "token",
              "type": "string",
            },
            "ts_from": {
              "description": "Filter files created after this timestamp (inclusive).",
              "name": "ts_from",
              "type": "number",
            },
            "ts_to": {
              "description": "Filter files created before this timestamp (inclusive).",
              "name": "ts_to",
              "type": "number",
            },
            "types": {
              "description": "Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list.",
              "name": "types",
              "type": "string",
            },
            "user": {
              "description": "Filter files created by a single user.",
              "name": "user",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "files_list",
  },
  {
    "description": "POST /files.remote.add - Adds a file from a remote service",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "external_id": {
              "description": "Creator defined GUID for the file.",
              "type": "string",
            },
            "external_url": {
              "description": "URL of the remote file.",
              "type": "string",
            },
            "filetype": {
              "description": "type of file",
              "type": "string",
            },
            "indexable_file_contents": {
              "description": "A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.",
              "type": "string",
            },
            "preview_image": {
              "description": "Preview of the document via `multipart/form-data`.",
              "type": "string",
            },
            "title": {
              "description": "Title of the file being shared.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `remote_files:write`",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "files_remote_add",
  },
  {
    "description": "GET /files.remote.info - Retrieve information about a remote file added to Slack",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "external_id": {
              "description": "Creator defined GUID for the file.",
              "name": "external_id",
              "type": "string",
            },
            "file": {
              "description": "Specify a file by providing its ID.",
              "name": "file",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `remote_files:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "files_remote_info",
  },
  {
    "description": "GET /files.remote.list - Retrieve information about a remote file added to Slack",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "channel": {
              "description": "Filter files appearing in a specific channel, indicated by its ID.",
              "name": "channel",
              "type": "string",
            },
            "cursor": {
              "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return.",
              "name": "limit",
              "type": "integer",
            },
            "token": {
              "description": "Authentication token. Requires scope: `remote_files:read`",
              "name": "token",
              "type": "string",
            },
            "ts_from": {
              "description": "Filter files created after this timestamp (inclusive).",
              "name": "ts_from",
              "type": "number",
            },
            "ts_to": {
              "description": "Filter files created before this timestamp (inclusive).",
              "name": "ts_to",
              "type": "number",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "files_remote_list",
  },
  {
    "description": "POST /files.remote.remove - Remove a remote file.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "external_id": {
              "description": "Creator defined GUID for the file.",
              "type": "string",
            },
            "file": {
              "description": "Specify a file by providing its ID.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `remote_files:write`",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "files_remote_remove",
  },
  {
    "description": "GET /files.remote.share - Share a remote file into a channel.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "channels": {
              "description": "Comma-separated list of channel IDs where the file will be shared.",
              "name": "channels",
              "type": "string",
            },
            "external_id": {
              "description": "The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required.",
              "name": "external_id",
              "type": "string",
            },
            "file": {
              "description": "Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required.",
              "name": "file",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `remote_files:share`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "files_remote_share",
  },
  {
    "description": "POST /files.remote.update - Updates an existing remote file.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "external_id": {
              "description": "Creator defined GUID for the file.",
              "type": "string",
            },
            "external_url": {
              "description": "URL of the remote file.",
              "type": "string",
            },
            "file": {
              "description": "Specify a file by providing its ID.",
              "type": "string",
            },
            "filetype": {
              "description": "type of file",
              "type": "string",
            },
            "indexable_file_contents": {
              "description": "File containing contents that can be used to improve searchability for the remote file.",
              "type": "string",
            },
            "preview_image": {
              "description": "Preview of the document via `multipart/form-data`.",
              "type": "string",
            },
            "title": {
              "description": "Title of the file being shared.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `remote_files:write`",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "files_remote_update",
  },
  {
    "description": "POST /files.revokePublicURL - Revokes public/external sharing access for a file",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "file": {
              "description": "File to revoke",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `files:write:user`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "files_revokePublicURL",
  },
  {
    "description": "POST /files.sharedPublicURL - Enables a file for public/external sharing.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "file": {
              "description": "File to share",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `files:write:user`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "files_sharedPublicURL",
  },
  {
    "description": "POST /files.upload - Uploads or creates a file.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channels": {
              "description": "Comma-separated list of channel names or IDs where the file will be shared.",
              "type": "string",
            },
            "content": {
              "description": "File contents via a POST variable. If omitting this parameter, you must provide a `file`.",
              "type": "string",
            },
            "file": {
              "description": "File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`.",
              "type": "string",
            },
            "filename": {
              "description": "Filename of file.",
              "type": "string",
            },
            "filetype": {
              "description": "A [file type](/types/file#file_types) identifier.",
              "type": "string",
            },
            "initial_comment": {
              "description": "The message text introducing the file in specified `channels`.",
              "type": "string",
            },
            "thread_ts": {
              "description": "Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead.",
              "type": "number",
            },
            "title": {
              "description": "Title of file.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `files:write:user`",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "files_upload",
  },
  {
    "description": "GET /migration.exchange - For Enterprise Grid workspaces, map local user IDs to global user IDs",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "team_id": {
              "description": "Specify team_id starts with `T` in case of Org Token",
              "name": "team_id",
              "type": "string",
            },
            "to_old": {
              "description": "Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`.",
              "name": "to_old",
              "type": "boolean",
            },
            "token": {
              "description": "Authentication token. Requires scope: `tokens.basic`",
              "name": "token",
              "type": "string",
            },
            "users": {
              "description": "A comma-separated list of user ids, up to 400 per request",
              "name": "users",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "migration_exchange",
  },
  {
    "description": "GET /oauth.access - Exchanges a temporary OAuth verifier code for an access token.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "client_id": {
              "description": "Issued when you created your application.",
              "name": "client_id",
              "type": "string",
            },
            "client_secret": {
              "description": "Issued when you created your application.",
              "name": "client_secret",
              "type": "string",
            },
            "code": {
              "description": "The `code` param returned via the OAuth callback.",
              "name": "code",
              "type": "string",
            },
            "redirect_uri": {
              "description": "This must match the originally submitted URI (if one was sent).",
              "name": "redirect_uri",
              "type": "string",
            },
            "single_channel": {
              "description": "Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps).",
              "name": "single_channel",
              "type": "boolean",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "oauth_access",
  },
  {
    "description": "GET /oauth.token - Exchanges a temporary OAuth verifier code for a workspace token.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "client_id": {
              "description": "Issued when you created your application.",
              "name": "client_id",
              "type": "string",
            },
            "client_secret": {
              "description": "Issued when you created your application.",
              "name": "client_secret",
              "type": "string",
            },
            "code": {
              "description": "The `code` param returned via the OAuth callback.",
              "name": "code",
              "type": "string",
            },
            "redirect_uri": {
              "description": "This must match the originally submitted URI (if one was sent).",
              "name": "redirect_uri",
              "type": "string",
            },
            "single_channel": {
              "description": "Request the user to add your app only to a single channel.",
              "name": "single_channel",
              "type": "boolean",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "oauth_token",
  },
  {
    "description": "GET /oauth.v2.access - Exchanges a temporary OAuth verifier code for an access token.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "client_id": {
              "description": "Issued when you created your application.",
              "name": "client_id",
              "type": "string",
            },
            "client_secret": {
              "description": "Issued when you created your application.",
              "name": "client_secret",
              "type": "string",
            },
            "code": {
              "description": "The `code` param returned via the OAuth callback.",
              "name": "code",
              "type": "string",
            },
            "redirect_uri": {
              "description": "This must match the originally submitted URI (if one was sent).",
              "name": "redirect_uri",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "oauth_v2_access",
  },
  {
    "description": "POST /pins.add - Pins an item to a channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Channel to pin the item in.",
              "type": "string",
            },
            "timestamp": {
              "description": "Timestamp of the message to pin.",
              "type": "string",
            },
          },
          "required": [
            "channel",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `pins:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "pins_add",
  },
  {
    "description": "GET /pins.list - Lists items pinned to a channel.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "channel": {
              "description": "Channel to get pinned items for.",
              "name": "channel",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `pins:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "pins_list",
  },
  {
    "description": "POST /pins.remove - Un-pins an item from a channel.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Channel where the item is pinned to.",
              "type": "string",
            },
            "timestamp": {
              "description": "Timestamp of the message to un-pin.",
              "type": "string",
            },
          },
          "required": [
            "channel",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `pins:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "pins_remove",
  },
  {
    "description": "POST /reactions.add - Adds a reaction to an item.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Channel where the message to add reaction to was posted.",
              "type": "string",
            },
            "name": {
              "description": "Reaction (emoji) name.",
              "type": "string",
            },
            "timestamp": {
              "description": "Timestamp of the message to add reaction to.",
              "type": "string",
            },
          },
          "required": [
            "channel",
            "name",
            "timestamp",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `reactions:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "reactions_add",
  },
  {
    "description": "GET /reactions.get - Gets reactions for an item.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "channel": {
              "description": "Channel where the message to get reactions for was posted.",
              "name": "channel",
              "type": "string",
            },
            "file": {
              "description": "File to get reactions for.",
              "name": "file",
              "type": "string",
            },
            "file_comment": {
              "description": "File comment to get reactions for.",
              "name": "file_comment",
              "type": "string",
            },
            "full": {
              "description": "If true always return the complete reaction list.",
              "name": "full",
              "type": "boolean",
            },
            "timestamp": {
              "description": "Timestamp of the message to get reactions for.",
              "name": "timestamp",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `reactions:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "reactions_get",
  },
  {
    "description": "GET /reactions.list - Lists reactions made by a user.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "count": {
              "description": "",
              "name": "count",
              "type": "integer",
            },
            "cursor": {
              "description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See [pagination](/docs/pagination) for more details.",
              "name": "cursor",
              "type": "string",
            },
            "full": {
              "description": "If true always return the complete reaction list.",
              "name": "full",
              "type": "boolean",
            },
            "limit": {
              "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.",
              "name": "limit",
              "type": "integer",
            },
            "page": {
              "description": "",
              "name": "page",
              "type": "integer",
            },
            "token": {
              "description": "Authentication token. Requires scope: `reactions:read`",
              "name": "token",
              "type": "string",
            },
            "user": {
              "description": "Show reactions made by this user. Defaults to the authed user.",
              "name": "user",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "reactions_list",
  },
  {
    "description": "POST /reactions.remove - Removes a reaction from an item.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Channel where the message to remove reaction from was posted.",
              "type": "string",
            },
            "file": {
              "description": "File to remove reaction from.",
              "type": "string",
            },
            "file_comment": {
              "description": "File comment to remove reaction from.",
              "type": "string",
            },
            "name": {
              "description": "Reaction (emoji) name.",
              "type": "string",
            },
            "timestamp": {
              "description": "Timestamp of the message to remove reaction from.",
              "type": "string",
            },
          },
          "required": [
            "name",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `reactions:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "reactions_remove",
  },
  {
    "description": "POST /reminders.add - Creates a reminder.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "text": {
              "description": "The content of the reminder",
              "type": "string",
            },
            "time": {
              "description": "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. "in 15 minutes," or "every Thursday")",
              "type": "string",
            },
            "user": {
              "description": "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.",
              "type": "string",
            },
          },
          "required": [
            "text",
            "time",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `reminders:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "reminders_add",
  },
  {
    "description": "POST /reminders.complete - Marks a reminder as complete.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "reminder": {
              "description": "The ID of the reminder to be marked as complete",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `reminders:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "reminders_complete",
  },
  {
    "description": "POST /reminders.delete - Deletes a reminder.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "reminder": {
              "description": "The ID of the reminder",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `reminders:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "reminders_delete",
  },
  {
    "description": "GET /reminders.info - Gets information about a reminder.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "reminder": {
              "description": "The ID of the reminder",
              "name": "reminder",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `reminders:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "reminders_info",
  },
  {
    "description": "GET /reminders.list - Lists all reminders created by or for a given user.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `reminders:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "reminders_list",
  },
  {
    "description": "GET /rtm.connect - Starts a Real Time Messaging session.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "batch_presence_aware": {
              "description": "Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching).",
              "name": "batch_presence_aware",
              "type": "boolean",
            },
            "presence_sub": {
              "description": "Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions).",
              "name": "presence_sub",
              "type": "boolean",
            },
            "token": {
              "description": "Authentication token. Requires scope: `rtm:stream`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "rtm_connect",
  },
  {
    "description": "GET /search.messages - Searches for messages matching a query.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "count": {
              "description": "Pass the number of results you want per "page". Maximum of `100`.",
              "name": "count",
              "type": "integer",
            },
            "highlight": {
              "description": "Pass a value of `true` to enable query highlight markers (see below).",
              "name": "highlight",
              "type": "boolean",
            },
            "page": {
              "description": "",
              "name": "page",
              "type": "integer",
            },
            "query": {
              "description": "Search query.",
              "name": "query",
              "type": "string",
            },
            "sort": {
              "description": "Return matches sorted by either `score` or `timestamp`.",
              "name": "sort",
              "type": "string",
            },
            "sort_dir": {
              "description": "Change sort direction to ascending (`asc`) or descending (`desc`).",
              "name": "sort_dir",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `search:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "search_messages",
  },
  {
    "description": "POST /stars.add - Adds a star to an item.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`).",
              "type": "string",
            },
            "file": {
              "description": "File to add star to.",
              "type": "string",
            },
            "file_comment": {
              "description": "File comment to add star to.",
              "type": "string",
            },
            "timestamp": {
              "description": "Timestamp of the message to add star to.",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `stars:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "stars_add",
  },
  {
    "description": "GET /stars.list - Lists stars for a user.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "count": {
              "description": "",
              "name": "count",
              "type": "string",
            },
            "cursor": {
              "description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first "page" of the collection. See [pagination](/docs/pagination) for more details.",
              "name": "cursor",
              "type": "string",
            },
            "limit": {
              "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.",
              "name": "limit",
              "type": "integer",
            },
            "page": {
              "description": "",
              "name": "page",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `stars:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "stars_list",
  },
  {
    "description": "POST /stars.remove - Removes a star from an item.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channel": {
              "description": "Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`).",
              "type": "string",
            },
            "file": {
              "description": "File to remove star from.",
              "type": "string",
            },
            "file_comment": {
              "description": "File comment to remove star from.",
              "type": "string",
            },
            "timestamp": {
              "description": "Timestamp of the message to remove star from.",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `stars:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "stars_remove",
  },
  {
    "description": "GET /team.accessLogs - Gets the access logs for the current team.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "before": {
              "description": "End of time range of logs to include in results (inclusive).",
              "name": "before",
              "type": "string",
            },
            "count": {
              "description": "",
              "name": "count",
              "type": "string",
            },
            "page": {
              "description": "",
              "name": "page",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "team_accessLogs",
  },
  {
    "description": "GET /team.billableInfo - Gets billable users information for the current team.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `admin`",
              "name": "token",
              "type": "string",
            },
            "user": {
              "description": "A user to retrieve the billable information for. Defaults to all users.",
              "name": "user",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "team_billableInfo",
  },
  {
    "description": "GET /team.info - Gets information about the current team.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "team": {
              "description": "Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels",
              "name": "team",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `team:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "team_info",
  },
  {
    "description": "GET /team.integrationLogs - Gets the integration logs for the current team.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "app_id": {
              "description": "Filter logs to this Slack app. Defaults to all logs.",
              "name": "app_id",
              "type": "string",
            },
            "change_type": {
              "description": "Filter logs with this change type. Defaults to all logs.",
              "name": "change_type",
              "type": "string",
            },
            "count": {
              "description": "",
              "name": "count",
              "type": "string",
            },
            "page": {
              "description": "",
              "name": "page",
              "type": "string",
            },
            "service_id": {
              "description": "Filter logs to this service. Defaults to all logs.",
              "name": "service_id",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `admin`",
              "name": "token",
              "type": "string",
            },
            "user": {
              "description": "Filter logs generated by this user’s actions. Defaults to all logs.",
              "name": "user",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "team_integrationLogs",
  },
  {
    "description": "GET /team.profile.get - Retrieve a team's profile.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `users.profile:read`",
              "name": "token",
              "type": "string",
            },
            "visibility": {
              "description": "Filter by visibility.",
              "name": "visibility",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "team_profile_get",
  },
  {
    "description": "POST /usergroups.create - Create a User Group",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channels": {
              "description": "A comma separated string of encoded channel IDs for which the User Group uses as a default.",
              "type": "string",
            },
            "description": {
              "description": "A short description of the User Group.",
              "type": "string",
            },
            "handle": {
              "description": "A mention handle. Must be unique among channels, users and User Groups.",
              "type": "string",
            },
            "include_count": {
              "description": "Include the number of users in each User Group.",
              "type": "boolean",
            },
            "name": {
              "description": "A name for the User Group. Must be unique among User Groups.",
              "type": "string",
            },
          },
          "required": [
            "name",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `usergroups:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "usergroups_create",
  },
  {
    "description": "POST /usergroups.disable - Disable an existing User Group",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "include_count": {
              "description": "Include the number of users in the User Group.",
              "type": "boolean",
            },
            "usergroup": {
              "description": "The encoded ID of the User Group to disable.",
              "type": "string",
            },
          },
          "required": [
            "usergroup",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `usergroups:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "usergroups_disable",
  },
  {
    "description": "POST /usergroups.enable - Enable a User Group",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "include_count": {
              "description": "Include the number of users in the User Group.",
              "type": "boolean",
            },
            "usergroup": {
              "description": "The encoded ID of the User Group to enable.",
              "type": "string",
            },
          },
          "required": [
            "usergroup",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `usergroups:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "usergroups_enable",
  },
  {
    "description": "GET /usergroups.list - List all User Groups for a team",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "include_count": {
              "description": "Include the number of users in each User Group.",
              "name": "include_count",
              "type": "boolean",
            },
            "include_disabled": {
              "description": "Include disabled User Groups.",
              "name": "include_disabled",
              "type": "boolean",
            },
            "include_users": {
              "description": "Include the list of users for each User Group.",
              "name": "include_users",
              "type": "boolean",
            },
            "token": {
              "description": "Authentication token. Requires scope: `usergroups:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "usergroups_list",
  },
  {
    "description": "POST /usergroups.update - Update an existing User Group",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "channels": {
              "description": "A comma separated string of encoded channel IDs for which the User Group uses as a default.",
              "type": "string",
            },
            "description": {
              "description": "A short description of the User Group.",
              "type": "string",
            },
            "handle": {
              "description": "A mention handle. Must be unique among channels, users and User Groups.",
              "type": "string",
            },
            "include_count": {
              "description": "Include the number of users in the User Group.",
              "type": "boolean",
            },
            "name": {
              "description": "A name for the User Group. Must be unique among User Groups.",
              "type": "string",
            },
            "usergroup": {
              "description": "The encoded ID of the User Group to update.",
              "type": "string",
            },
          },
          "required": [
            "usergroup",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `usergroups:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "usergroups_update",
  },
  {
    "description": "GET /usergroups.users.list - List all users in a User Group",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "include_disabled": {
              "description": "Allow results that involve disabled User Groups.",
              "name": "include_disabled",
              "type": "boolean",
            },
            "token": {
              "description": "Authentication token. Requires scope: `usergroups:read`",
              "name": "token",
              "type": "string",
            },
            "usergroup": {
              "description": "The encoded ID of the User Group to update.",
              "name": "usergroup",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "usergroups_users_list",
  },
  {
    "description": "POST /usergroups.users.update - Update the list of users for a User Group",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "include_count": {
              "description": "Include the number of users in the User Group.",
              "type": "boolean",
            },
            "usergroup": {
              "description": "The encoded ID of the User Group to update.",
              "type": "string",
            },
            "users": {
              "description": "A comma separated string of encoded user IDs that represent the entire list of users for the User Group.",
              "type": "string",
            },
          },
          "required": [
            "usergroup",
            "users",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `usergroups:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "usergroups_users_update",
  },
  {
    "description": "GET /users.conversations - List conversations the calling user may access.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "cursor": {
              "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.",
              "name": "cursor",
              "type": "string",
            },
            "exclude_archived": {
              "description": "Set to `true` to exclude archived channels from the list",
              "name": "exclude_archived",
              "type": "boolean",
            },
            "limit": {
              "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.",
              "name": "limit",
              "type": "integer",
            },
            "token": {
              "description": "Authentication token. Requires scope: `conversations:read`",
              "name": "token",
              "type": "string",
            },
            "types": {
              "description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`",
              "name": "types",
              "type": "string",
            },
            "user": {
              "description": "Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership.",
              "name": "user",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "users_conversations",
  },
  {
    "description": "POST /users.deletePhoto - Delete the user profile photo",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `users.profile:write`",
              "type": "string",
            },
          },
          "required": [
            "token",
          ],
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "users_deletePhoto",
  },
  {
    "description": "GET /users.getPresence - Gets user presence information.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `users:read`",
              "name": "token",
              "type": "string",
            },
            "user": {
              "description": "User to get presence info on. Defaults to the authed user.",
              "name": "user",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "users_getPresence",
  },
  {
    "description": "GET /users.identity - Get a user's identity.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `identity.basic`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "users_identity",
  },
  {
    "description": "GET /users.info - Gets information about a user.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "include_locale": {
              "description": "Set this to `true` to receive the locale for this user. Defaults to `false`",
              "name": "include_locale",
              "type": "boolean",
            },
            "token": {
              "description": "Authentication token. Requires scope: `users:read`",
              "name": "token",
              "type": "string",
            },
            "user": {
              "description": "User to get info on",
              "name": "user",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "users_info",
  },
  {
    "description": "GET /users.list - Lists all users in a Slack team.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "cursor": {
              "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.",
              "name": "cursor",
              "type": "string",
            },
            "include_locale": {
              "description": "Set this to `true` to receive the locale for users. Defaults to `false`",
              "name": "include_locale",
              "type": "boolean",
            },
            "limit": {
              "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors.",
              "name": "limit",
              "type": "integer",
            },
            "token": {
              "description": "Authentication token. Requires scope: `users:read`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "users_list",
  },
  {
    "description": "GET /users.lookupByEmail - Find a user with an email address.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "email": {
              "description": "An email address belonging to a user in the workspace",
              "name": "email",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `users:read.email`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "users_lookupByEmail",
  },
  {
    "description": "GET /users.profile.get - Retrieves a user's profile information.",
    "inputSchema": {
      "properties": {
        "query": {
          "properties": {
            "include_labels": {
              "description": "Include labels for each ID in custom profile fields",
              "name": "include_labels",
              "type": "boolean",
            },
            "token": {
              "description": "Authentication token. Requires scope: `users.profile:read`",
              "name": "token",
              "type": "string",
            },
            "user": {
              "description": "User to retrieve profile info for",
              "name": "user",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "users_profile_get",
  },
  {
    "description": "POST /users.profile.set - Set the profile information for a user.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "name": {
              "description": "Name of a single key to set. Usable only if `profile` is not passed.",
              "type": "string",
            },
            "profile": {
              "description": "Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.",
              "type": "string",
            },
            "user": {
              "description": "ID of user to change. This argument may only be specified by team admins on paid teams.",
              "type": "string",
            },
            "value": {
              "description": "Value to set a single key to. Usable only if `profile` is not passed.",
              "type": "string",
            },
          },
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `users.profile:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "users_profile_set",
  },
  {
    "description": "POST /users.setActive - Marked a user as active. Deprecated and non-functional.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `users:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "users_setActive",
  },
  {
    "description": "POST /users.setPhoto - Set the user profile photo",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "crop_w": {
              "description": "Width/height of crop box (always square)",
              "type": "string",
            },
            "crop_x": {
              "description": "X coordinate of top-left corner of crop box",
              "type": "string",
            },
            "crop_y": {
              "description": "Y coordinate of top-left corner of crop box",
              "type": "string",
            },
            "image": {
              "description": "File contents via `multipart/form-data`.",
              "type": "string",
            },
            "token": {
              "description": "Authentication token. Requires scope: `users.profile:write`",
              "type": "string",
            },
          },
          "required": [
            "token",
          ],
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "users_setPhoto",
  },
  {
    "description": "POST /users.setPresence - Manually sets user presence.",
    "inputSchema": {
      "properties": {
        "body": {
          "properties": {
            "presence": {
              "description": "Either `auto` or `away`",
              "type": "string",
            },
          },
          "required": [
            "presence",
          ],
          "type": "object",
        },
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `users:write`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "users_setPresence",
  },
  {
    "description": "GET /views.open - Open a view for a user.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "trigger_id": {
              "description": "Exchange a trigger to post to the user.",
              "name": "trigger_id",
              "type": "string",
            },
            "view": {
              "description": "A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.",
              "name": "view",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "views_open",
  },
  {
    "description": "GET /views.publish - Publish a static view for a User.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "hash": {
              "description": "A string that represents view state to protect against possible race conditions.",
              "name": "hash",
              "type": "string",
            },
            "user_id": {
              "description": "`id` of the user you want publish a view to.",
              "name": "user_id",
              "type": "string",
            },
            "view": {
              "description": "A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.",
              "name": "view",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "views_publish",
  },
  {
    "description": "GET /views.push - Push a view onto the stack of a root view.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "trigger_id": {
              "description": "Exchange a trigger to post to the user.",
              "name": "trigger_id",
              "type": "string",
            },
            "view": {
              "description": "A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.",
              "name": "view",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "views_push",
  },
  {
    "description": "GET /views.update - Update an existing view.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `none`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "external_id": {
              "description": "A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required.",
              "name": "external_id",
              "type": "string",
            },
            "hash": {
              "description": "A string that represents view state to protect against possible race conditions.",
              "name": "hash",
              "type": "string",
            },
            "view": {
              "description": "A [view object](/reference/surfaces/views). This must be a JSON-encoded string.",
              "name": "view",
              "type": "string",
            },
            "view_id": {
              "description": "A unique identifier of the view to be updated. Either `view_id` or `external_id` is required.",
              "name": "view_id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "views_update",
  },
  {
    "description": "GET /workflows.stepCompleted - Indicate that an app's step in a workflow completed execution.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `workflow.steps:execute`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "outputs": {
              "description": "Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object.",
              "name": "outputs",
              "type": "string",
            },
            "workflow_step_execute_id": {
              "description": "Context identifier that maps to the correct workflow step execution.",
              "name": "workflow_step_execute_id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "workflows_stepCompleted",
  },
  {
    "description": "GET /workflows.stepFailed - Indicate that an app's step in a workflow failed to execute.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `workflow.steps:execute`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "error": {
              "description": "A JSON-based object with a `message` property that should contain a human readable error message.",
              "name": "error",
              "type": "string",
            },
            "workflow_step_execute_id": {
              "description": "Context identifier that maps to the correct workflow step execution.",
              "name": "workflow_step_execute_id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "workflows_stepFailed",
  },
  {
    "description": "GET /workflows.updateStep - Update the configuration for a workflow extension step.",
    "inputSchema": {
      "properties": {
        "headers": {
          "properties": {
            "token": {
              "description": "Authentication token. Requires scope: `workflow.steps:execute`",
              "name": "token",
              "type": "string",
            },
          },
          "type": "object",
        },
        "query": {
          "properties": {
            "inputs": {
              "description": "A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables).",
              "name": "inputs",
              "type": "string",
            },
            "outputs": {
              "description": "An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.",
              "name": "outputs",
              "type": "string",
            },
            "step_image_url": {
              "description": "An optional field that can be used to override app image that is shown in the Workflow Builder.",
              "name": "step_image_url",
              "type": "string",
            },
            "step_name": {
              "description": "An optional field that can be used to override the step name that is shown in the Workflow Builder.",
              "name": "step_name",
              "type": "string",
            },
            "workflow_step_edit_id": {
              "description": "A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`.",
              "name": "workflow_step_edit_id",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "type": "object",
    },
    "name": "workflows_updateStep",
  },
]