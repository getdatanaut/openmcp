diff --git a/dist/changesets-cli.cjs.js b/dist/changesets-cli.cjs.js
index 82ed39a6b2a38fe0aaabb71c2ec745c502dbe06a..7883186534390a1869df97d53bb43e260ddf8ace 100644
--- a/dist/changesets-cli.cjs.js
+++ b/dist/changesets-cli.cjs.js
@@ -634,25 +634,55 @@ async function getPublishTool(cwd) {
   const pm = await packageManagerDetector.detect({
     cwd
   });
-  if (!pm || pm.name !== "pnpm") return {
+  if (!pm) return {
     name: "npm"
   };
-  try {
-    let result = await spawn__default["default"]("pnpm", ["--version"], {
-      cwd
-    });
-    let version = result.stdout.toString().trim();
-    let parsed = semverParse__default["default"](version);
-    return {
-      name: "pnpm",
-      shouldAddNoGitChecks: (parsed === null || parsed === void 0 ? void 0 : parsed.major) === undefined ? false : parsed.major >= 5
-    };
-  } catch (e) {
-    return {
-      name: "pnpm",
-      shouldAddNoGitChecks: false
-    };
+  if (pm.name === "pnpm") {
+    try {
+      let result = await spawn__default["default"]("pnpm", ["--version"], {
+        cwd
+      });
+      let version = result.stdout.toString().trim();
+      let parsed = semverParse__default["default"](version);
+      return {
+        name: "pnpm",
+        version: parsed
+      };
+    } catch (e) {
+      return {
+        name: "pnpm",
+        version: null
+      };
+    }
+  }
+  if (pm.name === "yarn") {
+    try {
+      let result = await spawn__default["default"]("yarn", ["--version"], {
+        cwd
+      });
+      let version = result.stdout.toString().trim();
+      let parsed = semverParse__default["default"](version);
+
+      // Yarn v2 introduced `yarn npm publish` which should be used
+      // to ensure packages are packed correctly prior to publishing
+      if (parsed != null && parsed.major >= 2) {
+        return {
+          name: "yarn",
+          version: parsed
+        };
+      }
+      return {
+        name: "npm"
+      };
+    } catch (e) {
+      return {
+        name: "npm"
+      };
+    }
   }
+  return {
+    name: "npm"
+  };
 }
 async function getTokenIsRequired() {
   const {
@@ -751,8 +781,15 @@ async function internalPublish(packageJson, opts, twoFactorState) {
     let otpCode = await getOtpCode(twoFactorState);
     publishFlags.push("--otp", otpCode);
   }
-  if (publishTool.name === "pnpm" && publishTool.shouldAddNoGitChecks) {
-    publishFlags.push("--no-git-checks");
+  if (publishTool.name === "pnpm") {
+    var _publishTool$version;
+    let {
+      major
+    } = (_publishTool$version = publishTool.version) !== null && _publishTool$version !== void 0 ? _publishTool$version : {};
+    let shouldAddNoGitChecks = major === undefined ? false : major >= 5;
+    if (shouldAddNoGitChecks) {
+      publishFlags.push("--no-git-checks");
+    }
   }
   const {
     scope,
@@ -764,16 +801,27 @@ async function internalPublish(packageJson, opts, twoFactorState) {
   const envOverride = {
     [scope ? `npm_config_${scope}:registry` : "npm_config_registry"]: registry
   };
+  let results;
+  if (publishTool.name === "pnpm") {
+    results = await spawn__default["default"]("pnpm", ["publish", "--json", ...publishFlags], {
+      env: Object.assign({}, process.env, envOverride),
+      cwd: opts.cwd
+    });
+  } else if (publishTool.name === "yarn") {
+    results = await spawn__default["default"]("yarn", ["npm", "publish", ...publishFlags], {
+      env: Object.assign({}, process.env, envOverride),
+      cwd: opts.cwd
+    });
+  } else {
+    results = await spawn__default["default"](publishTool.name, ["publish", opts.publishDir, "--json", ...publishFlags], {
+      env: Object.assign({}, process.env, envOverride)
+    });
+  }
   let {
     code,
     stdout,
     stderr
-  } = publishTool.name === "pnpm" ? await spawn__default["default"]("pnpm", ["publish", "--json", ...publishFlags], {
-    env: Object.assign({}, process.env, envOverride),
-    cwd: opts.cwd
-  }) : await spawn__default["default"](publishTool.name, ["publish", opts.publishDir, "--json", ...publishFlags], {
-    env: Object.assign({}, process.env, envOverride)
-  });
+  } = results;
   if (code !== 0) {
     // NPM's --json output is included alongside the `prepublish` and `postpublish` output in terminal
     // We want to handle this as best we can but it has some struggles:
diff --git a/dist/changesets-cli.esm.js b/dist/changesets-cli.esm.js
index 1e945455b39b9c6424b26960b3d26a095ad980e4..b89c754a3121eb0a73fa23d2287537429a26296e 100644
--- a/dist/changesets-cli.esm.js
+++ b/dist/changesets-cli.esm.js
@@ -596,25 +596,55 @@ async function getPublishTool(cwd) {
   const pm = await detect({
     cwd
   });
-  if (!pm || pm.name !== "pnpm") return {
+  if (!pm) return {
     name: "npm"
   };
-  try {
-    let result = await spawn$1("pnpm", ["--version"], {
-      cwd
-    });
-    let version = result.stdout.toString().trim();
-    let parsed = semverParse(version);
-    return {
-      name: "pnpm",
-      shouldAddNoGitChecks: (parsed === null || parsed === void 0 ? void 0 : parsed.major) === undefined ? false : parsed.major >= 5
-    };
-  } catch (e) {
-    return {
-      name: "pnpm",
-      shouldAddNoGitChecks: false
-    };
+  if (pm.name === "pnpm") {
+    try {
+      let result = await spawn$1("pnpm", ["--version"], {
+        cwd
+      });
+      let version = result.stdout.toString().trim();
+      let parsed = semverParse(version);
+      return {
+        name: "pnpm",
+        version: parsed
+      };
+    } catch (e) {
+      return {
+        name: "pnpm",
+        version: null
+      };
+    }
+  }
+  if (pm.name === "yarn") {
+    try {
+      let result = await spawn$1("yarn", ["--version"], {
+        cwd
+      });
+      let version = result.stdout.toString().trim();
+      let parsed = semverParse(version);
+
+      // Yarn v2 introduced `yarn npm publish` which should be used
+      // to ensure packages are packed correctly prior to publishing
+      if (parsed != null && parsed.major >= 2) {
+        return {
+          name: "yarn",
+          version: parsed
+        };
+      }
+      return {
+        name: "npm"
+      };
+    } catch (e) {
+      return {
+        name: "npm"
+      };
+    }
   }
+  return {
+    name: "npm"
+  };
 }
 async function getTokenIsRequired() {
   const {
@@ -713,8 +743,15 @@ async function internalPublish(packageJson, opts, twoFactorState) {
     let otpCode = await getOtpCode(twoFactorState);
     publishFlags.push("--otp", otpCode);
   }
-  if (publishTool.name === "pnpm" && publishTool.shouldAddNoGitChecks) {
-    publishFlags.push("--no-git-checks");
+  if (publishTool.name === "pnpm") {
+    var _publishTool$version;
+    let {
+      major
+    } = (_publishTool$version = publishTool.version) !== null && _publishTool$version !== void 0 ? _publishTool$version : {};
+    let shouldAddNoGitChecks = major === undefined ? false : major >= 5;
+    if (shouldAddNoGitChecks) {
+      publishFlags.push("--no-git-checks");
+    }
   }
   const {
     scope,
@@ -726,16 +763,27 @@ async function internalPublish(packageJson, opts, twoFactorState) {
   const envOverride = {
     [scope ? `npm_config_${scope}:registry` : "npm_config_registry"]: registry
   };
+  let results;
+  if (publishTool.name === "pnpm") {
+    results = await spawn$1("pnpm", ["publish", "--json", ...publishFlags], {
+      env: Object.assign({}, process.env, envOverride),
+      cwd: opts.cwd
+    });
+  } else if (publishTool.name === "yarn") {
+    results = await spawn$1("yarn", ["npm", "publish", ...publishFlags], {
+      env: Object.assign({}, process.env, envOverride),
+      cwd: opts.cwd
+    });
+  } else {
+    results = await spawn$1(publishTool.name, ["publish", opts.publishDir, "--json", ...publishFlags], {
+      env: Object.assign({}, process.env, envOverride)
+    });
+  }
   let {
     code,
     stdout,
     stderr
-  } = publishTool.name === "pnpm" ? await spawn$1("pnpm", ["publish", "--json", ...publishFlags], {
-    env: Object.assign({}, process.env, envOverride),
-    cwd: opts.cwd
-  }) : await spawn$1(publishTool.name, ["publish", opts.publishDir, "--json", ...publishFlags], {
-    env: Object.assign({}, process.env, envOverride)
-  });
+  } = results;
   if (code !== 0) {
     // NPM's --json output is included alongside the `prepublish` and `postpublish` output in terminal
     // We want to handle this as best we can but it has some struggles:
